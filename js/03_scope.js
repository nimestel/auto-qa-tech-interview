/**
 *  Скоуп - область видимости
 *        - что-то, что говорит нам о доступности переменных в функциях
 *
 *  Глобальный и локальный скоуп
 *
 *  Глобальный - переменные и функции объявлены вне конкретной функции,
 *   но доступны по всех функциях внутри этого скоупа
 *   (document, window)
 *
 *  Локальный - переменные доступны в рамках одной функции или блока
 *
 * */

// Локальный скоуп
function funcA() {
    let a = 1;

    function funcB() {
        let b = 2;

        function funcC() {
            let c = 3;

            console.log('funcC:', a, b, c);
        }

        funcC();
        console.log('funcB:', a, b);
    }

    funcB();
    console.log('funcA:', a);
}

funcA();

// Глобальный скоуп

/**
 * Глобальный объект предоставляет переменные и функции, доступные в любом месте программы
 * В браузере он называется window, в Node.js — global
 * Недавно globalThis был добавлен в язык как стандартизированное имя для глобального объекта
 */

//window.alert("Привет");

/**
 *  Цепочка областей видимости
 *
 *  [[Scope]] - это скрытое внутреннее свойство функции, которое она получает во время вызова.
 *    Данное свойство содержит ссылку на ту область видимости, в которой данная функция была
 *  объявлена.
 *
 *  JavaScript всегда начинает поиск переменной или функции с текущей области видимости.
 *    Если она в ней не будет найдена, то интерпретатор переместится к следующей области,
 *    указанной в [[Scope]], и попробует отыскать её там. После этого действия повторяются
 *
 *    Последовательность областей видимости, которые интерпретатор использует при разрешении имени идентификатора,
 *      называется в JavaScript цепочкой областей видимости (scope chain).
 */

//В этом примере интерпретатор при разрешении переменной color дойдёт от текущей до глобальной
// области видимости:

// global scope (глобальная область видимости)
var color = 'green';
function outputColor() {
    function displayColor() {
        console.log(color);
    }
    displayColor(); // "green"
}
outputColor();
