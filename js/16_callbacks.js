/**
 *   Коллбэк (callback)
 *
 *     - функция, переданная в другую функцию в качестве аргумента
 *     - "функция обратного вызова"
 *     - функция, которая должна быть выполнена после того, как другая функция завершила выполнение
 *
 *
 *   В JS функции - объекты, поэтому их можно передавать как аргументы в другие функции,
 *     или возвращать функции в результате выполнения
 *
 *   Любая функция, передаваемая как аргумент, называется коллбэк функцией.
 */

/**
 *   Зачем нужны коллбеки?
 *
 *   JS - событийно-ориентированный язык,
 *     вместо того чтобы ждать ответа для дальнейшего выполнения,
 *     JS продолжит выполнение и одновременно будет ждать других событий.
 *
 *   Коллбеки же позволяют убедиться, что код будет выполнен в ожидаемом порядке,
 *     и не раньше, чем необходимая часть программы отработает и завершится.
 */

function iGetCallback(someCallback) {
    const name = 'Tanya';
    console.log('callback run!');
    someCallback(name);
}

function logger1(name) {
    console.log(name, 'says: ');
    console.log('let me write from my heart');
}
function logger2(name) {
    console.log(name, 'says: ');
    console.log('let me speak from my callback');
}

iGetCallback(logger1);
// callback run!
// Tanya says:
// let me write from my heart

iGetCallback(logger2);
// callback run!
// Tanya says:
// let me speak from my callback

/**
 *   Callback hell
 *
 *    Для нескольких асинхронных действий, которые нужно выполнить друг за другом,
 *    нарастает вложенность, и код становится нечитабельным, а пирамида вызовов уходит вправо.
 *
 *    Такой подход не приветствуется, лучше использовать промисы.
 */
